name: Bootstrap Repo, Setup Server, Enable Auto-Deploy

on:
  workflow_dispatch: {}


jobs:
  bootstrap:
    name: Create project files and CI
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate project files
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p scripts .github/workflows

          cat > app.py <<'PY'
import os
from flask import Flask, jsonify, request

app = Flask(__name__)

@app.get("/healthz")
def health():
    return jsonify(status="ok")

@app.get("/")
def index():
    return (
        "<h1>Construction Estimator</h1>"
        "<p>POST JSON to <code>/api/estimate</code> to get a rough estimate.</p>"
        "<p>Example payload: {\"rooms\":[{\"name\":\"Kitchen\",\"area_sqft\":150,\"finish\":\"premium\"}]}</p>"
    )

COST_PER_SQFT = {"basic": 120.0, "standard": 180.0, "premium": 240.0}

@app.post("/api/estimate")
def estimate():
    data = request.get_json(silent=True) or {}
    rooms = data.get("rooms", [])
    line_items, total = [], 0.0

    for room in rooms:
        name = room.get("name", "Room")
        area = float(room.get("area_sqft", 0))
        finish = str(room.get("finish", "standard")).lower()
        rate = COST_PER_SQFT.get(finish, COST_PER_SQFT["standard"])
        cost = round(area * rate, 2)
        line_items.append({"name": name, "area_sqft": area, "finish": finish, "rate": rate, "cost": cost})
        total += cost

    result = {"subtotal": round(total, 2), "currency": "USD", "items": line_items}

    api_key = os.getenv("OPENAI_API_KEY")
    if api_key and data.get("include_note", False):
        try:
            from openai import OpenAI
            client = OpenAI(api_key=api_key)
            prompt = (
                "Write a one-sentence friendly note for a construction estimate "
                f"that mentions total ${result['subtotal']:.2f} and reminds that finishes affect price."
            )
            chat = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": prompt}],
                max_tokens=40,
            )
            result["note"] = chat.choices[0].message.content
        except Exception:
            result["note"] = "Estimate generated. Final price depends on finishes and site conditions."
    return jsonify(result)
PY

          cat > requirements.txt <<'REQ'
flask==3.0.3
gunicorn==21.2.0
openai>=1.30.0
REQ

          cat > Dockerfile <<'DOCK'
FROM python:3.10-slim
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1
RUN apt-get update && apt-get install -y --no-install-recommends build-essential && rm -rf /var/lib/apt/lists/*
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
RUN useradd -m appuser
USER appuser
EXPOSE 5000
CMD ["gunicorn", "app:app", "-c", "gunicorn.conf.py"]
DOCK

          cat > docker-compose.yml <<'YML'
version: "3.8"
services:
  estimator_app:
    build: .
    ports:
      - "5000:5000"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - .:/app
    restart: always
YML

          cat > docker-compose.prod.yml <<'YML'
version: "3.8"
services:
  estimator_app:
    image: ${IMAGE}
    ports:
      - "80:5000"
    env_file:
      - .env
    restart: unless-stopped
YML

          cat > gunicorn.conf.py <<'PY'
bind = "0.0.0.0:5000"
workers = 2
threads = 4
timeout = 60
graceful_timeout = 30
keepalive = 5
PY

          cat > .dockerignore <<'IGN'
.git
__pycache__/
*.pyc
*.pyo
*.pyd
.env
.env.*
.venv
venv
build/
dist/
.gitignore
Dockerfile*
docker-compose*.yml
IGN

          cat > .gitignore <<'IGN'
__pycache__/
*.pyc
*.pyo
*.pyd
*.env
.env
.env.*
.venv/
venv/
*.sqlite3
.DS_Store
.vscode/
.idea/
IGN

          cat > .env.example <<'ENV'
# Used locally or on server (copy to .env on server)
OPENAI_API_KEY=sk-your-key-here
ENV

          cat > README.md <<'MD'
# Construction Estimator

Dockerized Flask + Gunicorn service. CI builds an image and deploys to your server on push to `main`.

## Local dev
```bash
cp .env.example .env   # optional
docker compose up --build
curl http://localhost:5000/healthz
